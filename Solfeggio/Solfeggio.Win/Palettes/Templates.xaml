<ResourceDictionary
	xmlns="http://xamarin.com/schemas/2014/forms"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:m="clr-namespace:Solfeggio.Models"
	xmlns:c="clr-namespace:Solfeggio.Controls"
	xmlns:p="clr-namespace:Solfeggio.Presenters"
	xmlns:vm="clr-namespace:Solfeggio.ViewModels"
	xmlns:v="clr-namespace:Solfeggio.Views"
	xmlns:local="clr-namespace:Solfeggio"
	>
	
	<DataTemplate
		x:Key="HarmonicTemplate">
		<Grid
			Opacity="{Binding Magnitude, Converter={StaticResource HarmonicOpacityConverter}}"
			Rack.Columns="2* 2* 2* * * * *"
			Rack.Rows="* *">

			<Slider
				Rack.Cell="C0 R1"
				Minimum="+0.0"
				Maximum="+1.0"
				TickFrequency="0.01"
				TickPlacement="TopLeft"
				Value="{Binding Magnitude, Converter={StaticResource DoubleToStringTwoWayConverter}}" />
			<Slider
				Rack.Cell="C1 R1"
				TickFrequency="100"
				TickPlacement="TopLeft"
				Minimum="{StoreBinding StoreKey=p:MusicalPresenter, Path=Spectrum.Frequency.Threshold.Lower}"
				Maximum="{StoreBinding StoreKey=p:MusicalPresenter, Path=Spectrum.Frequency.Threshold.Upper}"
				Value="{Binding Frequency, Converter={StaticResource DoubleToStringTwoWayConverter}}" />
			<Slider
				Rack.Cell="C2 R1"
				TickFrequency="0.207"
				TickPlacement="TopLeft"
				Minimum="{StaticResource MinusSinglePi}"
				Maximum="{StaticResource PlusSinglePi}"
				Value="{Binding Phase, Converter={StaticResource DoubleToStringTwoWayConverter}}" />

			<Entry
				Rack.Cell="C0 R0"
				Text="{Binding Magnitude, Converter={StaticResource DoubleToStringTwoWayConverter}, UpdateSourceTrigger=PropertyChanged}" />
			<Entry
				Rack.Cell="C1 R0"
				Text="{Binding Frequency, Converter={StaticResource DoubleToStringTwoWayConverter}, UpdateSourceTrigger=PropertyChanged}" />
			<Picker
				Rack.Cell="C1 R0"
				HorizontalAlignment="Left"
				Width="21" />
			<Entry
				Rack.Cell="C2 R0"
				Text="{Binding Phase, Converter={StaticResource DoubleToStringTwoWayConverter}, UpdateSourceTrigger=PropertyChanged}" />
			<Entry
				Rack.Cell="C3 R2"
				ToolTip="{Localizing Gap}"
				Text="{Binding Gap, Converter={StaticResource DoubleToStringTwoWayConverter}, UpdateSourceTrigger=PropertyChanged}" />
			<Picker
				Rack.Cell="C3 R0"
				ItemsSource="{Binding BasisFuncs}"
				SelectedItem="{Binding BasisFunc, Mode=TwoWay}"
				ItemDisplayBinding="{Binding Converter={StaticResource DelegateToNameConverter}}" />
			<Picker
				Rack.Cell="C4 R0"
				ItemsSource="{Enum Type=m:PhaseMode}"
				SelectedItem="{Binding PhaseMode, Mode=TwoWay}" />

			<Switch
				Rack.Cell="C5 R0"
				HorizontalAlignment="Right"
				IsToggled="{Binding IsEnabled, Mode=TwoWay}" />

			<StackLayout
				Rack.Cell="C6 R0"
				Orientation="Horizontal"
				HorizontalAlignment="Right">
				<Button
					Content="✗"
					CommandParameter="{Binding}"
					Command="{Context Key=Set.Delete, StoreKey=vm:HarmonicManager, KeyPath=ActiveProfile}" />
			</StackLayout>
		</Grid>
	</DataTemplate>

	<DataTemplate
		x:Key="ProfileHeaderTemplate">
		<StackLayout
			Orientation="Horizontal">
			<Label
				Text="{Binding Title}" />
			<!--<Button
				Content="✗"
				Command="{Context Key=Set.Delete, StoreKey=local:Generator}"
				CommandParameter="{Binding}" />-->
		</StackLayout>
	</DataTemplate>

	<ControlTemplate
		x:Key="TitleTemplate">
		<StackView
			Style="{StaticResource TitlePanelStyle}"
			>
			<Label
				Text="{Localizing Key=Profile}"
				/>
			<Picker
				ItemDisplayBinding="{Binding Title}"
				ItemsSource="{Binding Path=Profiles}"
				SelectedItem="{Binding Path=ActiveProfile, Mode=TwoWay}"
				/>
			<Button
				Content="➕"
				Command="{Context Key=Set.Create}"
				/>
			<Button
				Content="➖"
				CommandParameter="{Binding Path=ActiveProfile}"
				Command="{Context Key=Set.Delete, TrackedPath=CommandParameter}"
				/>
		</StackView>
	</ControlTemplate>

	<ControlTemplate
		x:Key="TitleProfileTemplate">
		<StackLayout
			Rack.Cell="R0 C0 CS2"
			Style="{StaticResource TitlePanelStyle}"
			>
			<Label
				Text="{Localizing Key=Title}" />
			<Entry
				Text="{Binding Title, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
			<Button
				Content="✗"
				CommandParameter="{Binding}"
				Command="{Context Key=Set.Delete, TrackedPath=CommandParameter}" />
		</StackLayout>
	</ControlTemplate>
	
	<DataTemplate
		x:Key="ProcessingProfileTemplate"
		>
		<Grid
			Rack.Rows="^ *"
			Rack.Columns="* *"
			>
			<ContentView
				Rack.Cell="R0 C0 CS2"
				Template="{StaticResource TitleProfileTemplate}"
				/>

			<Grid
				Rack.Cell="R1 C0"
				Rack.Rows="^ ^ ^"
				Rack.Columns="^ ^ ^ ^ ^ ^"
				VerticalAlignment="Center"
				HorizontalAlignment="Center"
				>
				<Label
					Rack.Cell="R1 C0"
					Text="{Localizing Key=Input}"
					/>
				<Label
					Rack.Cell="R2 C0"
					Text="{Localizing Key=Output}"
					/>
				<Label
					Rack.Cell="R0 C1"
					Text="{Localizing Key=Device}"
					/>
				<Label
					Rack.Cell="R0 C2"
					Text="{Localizing Key=Level}"
					/>
				<Label
					Rack.Cell="R0 C3"
					Text="{Localizing Key=Buffers}"
					/>
				<Label
					Rack.Cell="R1 C4"
					Text="{Localizing Key=Pcs}"
					/>

				<Picker
					Rack.Cell="R1 C1"
					MinWidth="210"
					Tag="{Localizing Key=Input}"
					ItemsSource="{Binding InputDevices}"
					SelectedItem="{Binding ActiveInputDevice, Mode=TwoWay}"
					DisplayMemberPath="ProductName"
					/>
				<Picker
					Rack.Cell="R2 C1"
					MinWidth="210"
					ItemsSource="{Binding OutputDevices}"
					SelectedItem="{Binding ActiveOutputDevice, Mode=TwoWay}"
					DisplayMemberPath="ProductName"
					/>
				<ContentView
					Rack.Cell="R1 C2"
					DataContext="{Binding InputLevel, Mode=TwoWay}"
					Template="{StaticResource ValuePickerTemplate}"
					/>
				<ContentView
					Rack.Cell="R2 C2"
					DataContext="{Binding OutputLevel, Mode=TwoWay}"
					Template="{StaticResource ValuePickerTemplate}"
					/>
				<Picker
					Rack.Cell="R1 C3"
					ItemsSource="{StaticResource AllowedBuffersCount}"
					SelectedItem="{Binding BuffersCount, Mode=TwoWay}"
					/>
			</Grid>

			<Grid
				Rack.Cell="R1 C1"
				Rack.Rows="^ ^ ^ ^ ^"
				Rack.Columns="^ ^ ^"
				VerticalAlignment="Center"
				HorizontalAlignment="Center"
				>
				<Label
					Rack.Cell="R0 C1"
					Text="{Localizing Key=Sample}"
					/>
				<Label
					Rack.Cell="R1 C0"
					Text="{Localizing Key=Window}"
					/>
				<Label
					Rack.Cell="R2 C0"
					Text="{Localizing Key=Rate}"
					/>
				<Label
					Rack.Cell="R3 C0"
					Text="{Localizing Key=Length}"
					/>

				<Label
					Rack.Cell="R2 C2"
					Text="{Localizing Key=Hz}"
					/>
				<Label
					Rack.Cell="R3 C2"
					Text="{Localizing Key=Pcs}"
					/>
				<Label
					Rack.Cell="R34 C2"
					Text="{Localizing Key=ms}"
					/>

				<Picker
					Rack.Cell="R1 C1"
					ItemsSource="{Binding Windows}"
					SelectedItem="{Binding ActiveWindow, Mode=TwoWay}"
					ItemDisplayBinding="{Binding Converter={StaticResource DelegateToNameConverter}}" />
				<Picker
					Rack.Cell="R2 C1"
					ItemsSource="{Binding SampleRates}"
					SelectedItem="{Binding SampleRate, Mode=TwoWay}" />
				<StackLayout
					Rack.Cell="R3 C1"
					Orientation="Horizontal"
					>
					<Label
						Text="2 ^"
						/>
					<Picker
						ItemsSource="{StaticResource AllowedPowsOf2}"
						SelectedItem="{Binding FramePow, Mode=TwoWay}"
						/>
					<Label
						Text="{Binding FrameSize, StringFormat='= {0}'}"
						/>
				</StackLayout>
				<Grid
					Rack.Cell="R4 C0 CS2"
					Rack.Columns="* ^"
					>
					<Label
						Rack.Cell="C0"
						HorizontalAlignment="Left"
						Text="{Localizing Key=Duration}"
						/>
					<Label
						Rack.Cell="C1"
						HorizontalAlignment="Right"
						Text="{Binding FrameDuration.TotalMilliseconds}"
						/>
				</Grid>
			</Grid>
		</Grid>
	</DataTemplate>

	<DataTemplate
		x:Key="HarmonicProfileTemplate">
		<StackLayout>
			<ContentView
				Template="{StaticResource TitleProfileTemplate}"
				/>

			<Grid
				Rack.Columns="2* 2* 2* * * * *"
				Rack.Rows="* *">
				<Label
					Rack.Cell="C0"
					Text="{Localizing Key=Magnitude}" />
				<Label
					Rack.Cell="C1"
					Text="{Localizing Key=Frequency}" />
				<Label
					Rack.Cell="C2"
					Text="{Localizing Key=Phase}" />
				<Label
					Rack.Cell="C3"
					Text="{Localizing Key=Basis}" />
				<Label
					Rack.Cell="C4"
					Text="{Localizing Key=Mode}" />
				<Label
					Rack.Cell="C5"
					Text="{Localizing Key=Sound}" />
				<Label
					Rack.Cell="C6"
					Text="{Localizing Key=Action}" />
			</Grid>

			<ItemsView
				ItemsSource="{Binding Harmonics}"
				ItemTemplate="{StaticResource HarmonicTemplate}" />

			<Button
				HorizontalAlignment="Center"
				Content="{Localizing Key=Create}"
				Command="{Context Key=Set.Create, TrackedPath=DataContext}" />
		</StackLayout>
	</DataTemplate>

	<DataTemplate
		x:Key="HarmonicOutTemplate">
		<Grid
			Opacity="{Binding Harmonic.Magnitude, Converter={StaticResource HarmonicOpacityConverter}}"
			Rack.Columns="32 64 64 64 *">
			<Label
				Rack.Cell="C0"
				FontSize="{StaticResource MonospaceFontSize}"
				FontFamily="{StaticResource MonospaceFontFamily}"
				Text="{Binding NoteName}" />
			<Label
				Rack.Cell="C1"
				FontSize="{StaticResource MonospaceFontSize}"
				FontFamily="{StaticResource MonospaceFontFamily}"
				Text="{Binding EthalonFrequency, Converter={StaticResource DoubleToStringTwoWayConverter}}" />
			<Label
				Rack.Cell="C2"
				FontSize="{StaticResource MonospaceFontSize}"
				FontFamily="{StaticResource MonospaceFontFamily}"
				Text="{Binding DeltaFrequency, StringFormat={}({0:+0.00;-0.00;0.00})}" />
			<Label
				Rack.Cell="C3"
				FontSize="{StaticResource MonospaceFontSize}"
				FontFamily="{StaticResource MonospaceFontFamily}"
				Text="{Binding Harmonic.Frequency, Converter={StaticResource DoubleToStringTwoWayConverter}}" />
			<Label
				Rack.Cell="C4"
				FontSize="{StaticResource MonospaceFontSize}"
				FontFamily="{StaticResource MonospaceFontFamily}"
				Text="{Binding Harmonic.Magnitude, Converter={StaticResource DoubleToStringTwoWayConverter}}" />
		</Grid>
	</DataTemplate>

	<DataTemplate
		x:Key="OptionTemplate">
		<Grid
			Rack.Columns="* * 5*">
			<Label
				Rack.Cell="C0"
				Text="{Binding Tag}" />
			<ContentPresenter
				Rack.Cell="C1"
				Content="{Binding}" />
		</Grid>
	</DataTemplate>

	<DataTemplate
		x:Key="RangeGridTemplate">

		<Grid
			Rack.Rows="^ ^ ^"
			Rack.Columns="^ ^ ^ ^"
			HorizontalAlignment="Center">

			<Label
				Rack.Cell="R0 C1"
				Text="{Localizing Key=Upper}" />
			<Label
				Rack.Cell="R0 C2"
				Text="{Localizing Key=Lower}" />
			<Label
				Rack.Cell="R0 C3"
				Opacity="{StaticResource InfoTextOpacityLevel}"
				Text="{Localizing Key=Length}" />

			<Label
				Rack.Cell="R2 C0"
				Text="{Localizing Key=Threshold}" />
			<Label
				Rack.Cell="R1 C0"
				Text="{Localizing Key=Limit}" />

			<Entry
				Rack.Cell="R2 C1"
				Text="{Binding Threshold.Upper, Mode=TwoWay, Converter={StaticResource DoubleToStringTwoWayConverter}}" />
			<Entry
				Rack.Cell="R2 C2"
				Text="{Binding Threshold.Lower, Mode=TwoWay, Converter={StaticResource DoubleToStringTwoWayConverter}}" />
			<Entry
				Rack.Cell="R1 C1"
				Text="{Binding Limit.Upper, Mode=TwoWay, Converter={StaticResource DoubleToStringTwoWayConverter}}" />
			<Entry
				Rack.Cell="R1 C2"
				Text="{Binding Limit.Lower, Mode=TwoWay, Converter={StaticResource DoubleToStringTwoWayConverter}}" />

			<Entry
				Rack.Cell="R2 C3"
				Style="{StaticResource ReadOnlyEntryStyle}"
				Opacity="{StaticResource InfoTextOpacityLevel}"
				Text="{Binding Threshold.Length, Mode=OneWay, Converter={StaticResource DoubleToStringTwoWayConverter}}" />
			<Entry
				Rack.Cell="R1 C3"
				Style="{StaticResource ReadOnlyEntryStyle}"
				Opacity="{StaticResource InfoTextOpacityLevel}"
				Text="{Binding Limit.Length, Mode=OneWay, Converter={StaticResource DoubleToStringTwoWayConverter}}" />
		</Grid>

	</DataTemplate>

	<DataTemplate
		x:Key="RangeTemplate">
		<StackLayout
			HorizontalAlignment="Stretch">

			<ContentPresenter
				Content="{Binding}"
				ContentTemplate="{StaticResource RangeGridTemplate}" />

			<c:RangeBar
				Maximum="{Binding Limit.Upper, Mode=TwoWay}"
				Minimum="{Binding Limit.Lower, Mode=TwoWay}"
				SelectionEnd="{Binding Threshold.Upper, Mode=TwoWay}"
				SelectionStart="{Binding Threshold.Lower, Mode=TwoWay}" />

			<StackLayout
				Orientation="Horizontal"
				HorizontalAlignment="Center">

				<Label
					Text="{Localizing Key=Scale}" />

				<Picker
					ItemsSource="{Binding VisualScaleFuncs}"
					SelectedItem="{Binding VisualScaleFunc, Mode=TwoWay}"
					ItemDisplayBinding="{Binding Converter={StaticResource DelegateToNameConverter}}" />

			</StackLayout>

		</StackLayout>
	</DataTemplate>

	<DataTemplate
		x:Key="MusicOptionsTemplate">
		<Grid
			Rack.Columns="^ ^ ^ 24 ^ ^">
			<Label
				Rack.Cell="C0"
				Text="{Localizing Standard, StringFormat='{}{0} [A1]'}"
				/>
			<Picker
				Rack.Cell="C1"
				ItemsSource="{Binding PitchStandards}"
				SelectedItem="{Binding ActivePitchStandard, Mode=TwoWay}"
				/>
			<Entry
				Rack.Cell="C1"
				Margin="4 4 22 4"
				Text="{Binding ActivePitchStandard, Mode=TwoWay}"
				/>
			<Label
				Rack.Cell="C2"
				Text="{Localizing Hz}"
				/>
			<Label
				Rack.Cell="C4"
				Text="{Localizing Notation}"
				/>
			<Picker
				Rack.Cell="C5"
				ItemsSource="{Binding Notations}"
				SelectedValue="{Binding ActiveNotation, Mode=TwoWay}"
				SelectedValuePath="Key"
				DisplayMemberPath="Key"
				/>
		</Grid>
	</DataTemplate>

	<DataTemplate
		x:Key="FormattingTemplate">
		<Grid
			Rack.Rows="* *"
			Rack.Columns="^ ^ ^"
			>
			<Label
				Rack.Cell="R1 C0"
				Text="{Localizing Key=Numeric}" />
			<Label
				Rack.Cell="R0 C1"
				Text="{Localizing Key=Monitor}" />
			<Picker
				Rack.Cell="R1 C1"
				HorizontalAlignment="Center"
				ItemsSource="{Binding NumericFormats}"
				SelectedItem="{Binding CommonNumericFormat, Mode=TwoWay}" />
			<Label
				Rack.Cell="R0 C2"
				Text="{Localizing Key=Screen}" />
			<Picker
				Rack.Cell="R1 C2"
				HorizontalAlignment="Center"
				ItemsSource="{Binding NumericFormats}"
				SelectedItem="{Binding NoteNumericFormat, Mode=TwoWay}" />
		</Grid>
	</DataTemplate>

	<DataTemplate
		x:Key="ShowStateTemplate">
		<ItemsView
			ItemTemplate="{StaticResource OptionTemplate}"
			ItemsSource="{StaticResource ShowStateSet}" />
	</DataTemplate>

	<DataTemplate
		x:Key="NamedColorTemplate">
		<StackLayout
			Orientation="Horizontal">
			<Frame
				Style="{StaticResource FrameStyle}"
				Background="{Binding Value}" />
			<Label
				Text="{Binding Value}" />
			<Label
				Text="{Binding Key}" />
		</StackLayout>
	</DataTemplate>

	<DataTemplate
		x:Key="BrushPreviewTemplate">
		<Grid
			Width="26"
			Height="26">
			<Frame
				Rack.Cell="C1"
				CornerRadius="10"
				Background="{StaticResource ChessBrush}" />
			<Frame
				Rack.Cell="C1"
				CornerRadius="10"
				Background="{Binding}" />
		</Grid>
	</DataTemplate>

	<ControlTemplate
		x:Key="ValuePickerTemplate">
		<Grid
			DataContext="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}}">
			<Frame
				Margin="2"
				CornerRadius="10"
				Background="{StaticResource LabelBrush}"
				/>
			<Expander
				x:Name="TemplateRoot">
				<Expander.Header>
					<Entry
						Text="{Binding DataContext, Mode=TwoWay, Converter={StaticResource DoubleToStringTwoWayConverter}}"
						/>
				</Expander.Header>
				<v:PopupView
					IsOpen="{Binding IsExpanded, ElementName=TemplateRoot}">
					<v:ValuePicker
						Value="{Binding DataContext, Mode=TwoWay}"
						/>
				</v:PopupView>
			</Expander>
		</Grid>
	</ControlTemplate>

	<ControlTemplate
		x:Key="ZIndexTemplate">
		<Grid
			DataContext="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}}">
			<Frame
				Margin="2"
				CornerRadius="10"
				Background="{StaticResource LabelBrush}"
				/>
			<Entry
				VerticalAlignment="Center"
				HorizontalAlignment="Center"
				Text="{Binding DataContext, Mode=TwoWay, Converter={StaticResource Int32ToStringTwoWayConverter}}"
				/>
		</Grid>
	</ControlTemplate>

	<ControlTemplate
		x:Key="RangePickerTemplate">
		<Grid>
			<Frame
				Margin="2"
				CornerRadius="10"
				Background="{StaticResource LabelBrush}"
				/>
			<Expander
				x:Name="TemplateRoot">
				<Expander.Header>
					<Grid
						Rack.Rows="* *"
						Rack.Columns="^ ^ ^"
						DataContext="{Binding DataContext, RelativeSource={RelativeSource Mode=TemplatedParent}}">
						<Entry
							Rack.Cell="R0 C0"
							Text="{Binding Threshold.Upper, Converter={StaticResource DoubleToStringTwoWayConverter}}"
						/>
						<Label
							Rack.Cell="R0 C1"
							Text="-"
							/>
						<Entry
							Rack.Cell="R0 C2"
							Text="{Binding Threshold.Lower, Converter={StaticResource DoubleToStringTwoWayConverter}}"
						/>
						<Label
							Rack.Cell="R1 C1"
							Text="="
							/>
						<Entry
							Rack.Cell="R1 C2"
							Style="{StaticResource ReadOnlyEntryStyle}"
							Text="{Binding Threshold.Length, Mode=OneWay, Converter={StaticResource DoubleToStringTwoWayConverter}}"
							/>
					</Grid>
				</Expander.Header>
				<v:PopupView
					IsOpen="{Binding IsExpanded, ElementName=TemplateRoot}">
					<ContentPresenter
						Content="{Binding DataContext, RelativeSource={RelativeSource Mode=TemplatedParent}}"
						ContentTemplate="{StaticResource RangeTemplate}"
						/>
				</v:PopupView>
			</Expander>
		</Grid>
	</ControlTemplate>

	<ControlTemplate
		x:Key="VisibilityTemplate">
		<Grid>
			<Frame
				Rack.Cell="C0 CS2"
				Margin="2"
				CornerRadius="10"
				Background="{StaticResource LabelBrush}"
				/>
			<Switch
				Rack.Cell="R1 C1"
				VerticalAlignment="Center"
				HorizontalAlignment="Center"
				IsToggled="{Binding DataContext, RelativeSource={RelativeSource Mode=TemplatedParent}, Mode=TwoWay, Converter={StaticResource IsVisibleConverter}}"
				/>
		</Grid>
	</ControlTemplate>

	<ControlTemplate
		x:Key="ColorValueTemplate">
		<Expander
			x:Name="Root">
			<Expander.Header>
				<Grid>
					<Frame
						CornerRadius="10"
						Background="LightGray" />
					<Frame
						CornerRadius="10"
						Background="{StaticResource ChessBrush}" />
					<Frame
						CornerRadius="10"
						Background="{Binding DataContext, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource ColorToSolidBrushConverter}}" />
					<Entry
						Margin="10 4"
						Text="{Binding DataContext, RelativeSource={RelativeSource Mode=TemplatedParent}, Mode=TwoWay, Converter={StaticResource ColorToStringTwoWayConverter}}" />
				</Grid>
			</Expander.Header>
			<v:PopupView
				IsOpen="{Binding IsExpanded, ElementName=Root}">
				<v:ColorPicker
					Value="{Binding DataContext, RelativeSource={RelativeSource Mode=TemplatedParent}, Mode=TwoWay}" />
			</v:PopupView>
		</Expander>
	</ControlTemplate>

	<ControlTemplate
		x:Key="BrushPickerTemplate">
		<Grid
			Rack.Columns="^ *">
			<Frame
				Rack.Cell="C0 CS2"
				Margin="2"
				CornerRadius="10"
				Background="{StaticResource LabelBrush}"
				/>
			<Expander
				Rack.Cell="C0"
				x:Name="Root"
				Header="{Binding DataContext, RelativeSource={RelativeSource Mode=TemplatedParent}}"
				HeaderTemplate="{StaticResource BrushPreviewTemplate}">
				<v:PopupView
					IsOpen="{Binding IsExpanded, ElementName=Root}">
					<v:BrushPicker
						Value="{Binding DataContext, RelativeSource={RelativeSource Mode=TemplatedParent}, Mode=TwoWay}"
						/>
				</v:PopupView>
			</Expander>
			<Picker
				Rack.Cell="C1"
				Width="17"
				Height="17"
				SelectedValuePath="Value"
				ItemsSource="{Binding Resources.MergedDictionaries[4], Source={x:Static local:App.Current}}"
				SelectedValue="{Binding DataContext, RelativeSource={RelativeSource Mode=TemplatedParent}, Mode=TwoWay}">
				<Picker.ItemTemplate>
					<DataTemplate>
						<StackLayout
							Orientation="Horizontal">
							<Frame
								Background="{Binding ChessBrush}">
								<Frame
									Style="{StaticResource FrameStyle}"
									Background="{Binding Value}" />
							</Frame>
							<Entry
								IsReadOnly="True"
								Text="{Binding Key}" />
						</StackLayout>
					</DataTemplate>
				</Picker.ItemTemplate>
			</Picker>
		</Grid>
	</ControlTemplate>

	<DataTemplate
		x:Key="VisualizationTemplate">
		<Grid>
			<ItemsView
				Background="Transparent"
				DataContext="{Binding Resources, Source={x:Static local:App.Current}}"
				ItemsSource="{StaticResource VisualizationSet}"
				/>
			<Grid
				Background="#55FFFFFF"
				Visibility="{StoreBinding StoreKey=vm:VisualizationManager, Path=ActiveProfile.IsBusy, Converter={StaticResource TrueToVisibleConverter}}"
				>
				<Label
					Text="⏳"
					Padding="16"
					Margin="16 64"
					FontSize="64"
					VerticalAlignment="Top"
					HorizontalAlignment="Center"
					Foreground="{StaticResource SpectrogramBackgroundBrush}"
					/>
			</Grid>
		</Grid>
	</DataTemplate>

</ResourceDictionary>